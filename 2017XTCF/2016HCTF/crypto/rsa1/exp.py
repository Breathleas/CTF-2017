from hashlib import sha512
from Crypto.Util.number import getPrime,bytes_to_long
from libnum import invmod, gcd
import random

def cal_bit(num):
    num = int(num)
    l = len(bin(num))
    return l-2

def pi_b(x):
    bt = 536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273L
    return invmod(x, bt)

def get_ed(p, q):
    k = cal_bit(q*p)
    phi_n = (p-1)*(q-1)
    r = random.randint(10, 99)
    while True:
        u = getPrime(k/4 - r)
        if gcd(u, phi_n) != 1:
            continue
        t = invmod(u, phi_n)
        e = pi_b(t)
        if gcd(e, phi_n) == 1:
            break
    d = invmod(e, phi_n)
    return (e, d)


def main():
    n = 0x90d0e5a017a156746c6ea2faaa094b190d4091db9d5949d3d530823eeee5e4bbd70fc9a1e66a7470609ed6eaa79a91bce2c64ac18837c838394cbb00d3beadde7efde9730d27ec7999e9a5712bdfb638e5cc7862818ada6fde240be853c3b72ed7ebc1be2732ecb2ccf460a0e7d6da8d64a8eec9734ec982105c3448a7da1d6c87ffafb8a076f0a02c2bec543cda136497450d91f8a0782916eb04606b2fc79a245a6924e40e5930948eb1d1a5fd9d55a720360234f0d32107e3a6ff92e0cd626fe5e6298615899cf0d3c86142045cac20c63ed55acc9d40589338f640adbb2dbf7cf9d9682164025f8f50717f63b0b0cdb23f5a826f43afd8f37e0c413ab9f80a6125e56e01b7756c33f95594930f274cfd04b35bd51bf5eee018c144ef74376bba8c893d3d0e49b93607721fb32aec514bcd889b4b6a0187ca3a0cb65a05fdfc2b1ee2ba81f3b7387c21de0c3772a1aec06598fcd4a5317537f61e5e2c09dd2bcdf176f2b926eda89fae8f93e9fa91c8e52d1c708b38915b8cebf0278449b8f240b7de1e90fa79c1247ec29572a43bb79babcd3aed12a4632b895a7fea3807450b17c89b733ec7f87872efc22a73c1d0854ad5539ae80f854db3fb31677c24a66943dd20ad8d1c44ca7b5601a6d7891ce700d516345907f61fd261db9be468ecd2ee3d6fa5b63887a3ab2bd22fdb24fc2d260cc4f42442c5462b385e459d7bL
    e = 0x651465a596ece6ed5f7fbd3ef519a826fdf69e9e99bd36db0c166d3eb735ea358ca06108603ed310e6b9ce46841073985b237af60cd1d9b6992b648db6aa5312bc545288ab6396d4e1709101d8a14a6cfc8d3e3433a30c465b05f2165b5a741057234c3d0f9a1c0c02e8ceae378f2392f6397645e401c621da98a8f42bfc1adbec15501185ef7ad5f127dcbcf505eeb1426da1944d932d6cd33abf227254fd10d6fdd78b8fe3f2664db55b6d86da51a45aa09e920b41c693cf1bc3d3c1e227ef74ad3bedbfe6e79e0bd1d12641016379ffc72f1ff8caf489dfb79325e15e25fb7e62642a65d6b6a35996fa56c84de1aca35a3c407837e617eca43540c48039dce2fa587e9fbb5f2a5bc0519bcf0dbb8565b25883b9c1201a16c4d9d1a5a17f143af45f28b241772046eeeb1dc2a8b71d27b96e54f14d592b30294db28a47b2ade81e58f5f39e695fbc50ea383c986b852b55a7d8da7bc1352863e8dd6909d947f05788870dc964a1bfa79f73ed33bbc1dbc8e44c641f1a0b0b9d0e65c8e902e89d2fadc4360d97151acf378ccfc90f7e323474b09c409ee4103b510a5f65853e72d43f858847f63a1a9d0a49dbcb6f3dd0333c4bbec0b6d2c5a816bc476f930875b3a216584086214344ac70c4ebdb2ac4af5cb29455d313dc8f71c6fb1bac110ccef5e598f53121c74cdc4a79e500f3ae5dd17b0d0eecd9b25c522ffba92eb1L
    flag = 0x6ad2f8a3494ae6c73a2bdf4819b29be6ee4384b22f9310241c4126f535f7141f28b77bd37f9426418cf1ff3f7d8d46aab558aaaf69c0cfc49631a023eaea319d97d480ac069d8f13ab8767ea01446a157e36baeb23b61b45317dfe96fed90576177cb2c7512da97ac1bebbcfe1dea2cb9bb100e9d9fd84b0b5c0b6161a6416711b3d6b8def5ce05a5c81360bc29fd2ae517de4fee65594dc8000122d062924686754b605e7259cbbffb409974ffadc07c1034089360193813bbb20f4a6eb95fe76ca57afcd3fbfb06dabc6dc983502296d5ae5dfd9c4b549b335eeca9c981ba102b65c5933435a340ca558b591a72e2da8afceec4b939b39b6035b0d73a3bd29677e06df2b3eef514bb5532bd69b3c26102e2177f37061b4c2e452588160771b0ff5acff7b52bbc3bab7da131fbafd98a74c4f805f4ef1cf2bff05759f54df45548e4fffd412a87c38fa9f87538d7a0cbd7adb66672710ac7849e11eb79f0f0ecf31d8f8e3513b1616ef850d07c7760efea1d2e9d97a0814362e62fe1233e111757b36121be06bc2dfeb9c27f84511e128dbe4178db730b272eecb21c44ff084794fc44b1e81a8c8be5635497e48438c92fd9bef178751b106cd381827002aeffc3194d19c1f7c168438b37347ace78298483aca249fddd3af1178be129620b9aecad49ede18935aa1738d96387d797500f4fc470ac0c46181a135bf76beaeeL
    t = pi_b(e)
    u = 8948155768929808909190614848498493894867694134034592996542061686448996733796446350880661256269588863486169124525920584307743343799349315972573650842990784998894040142269507161866033598616129503499971517799196690289064555929459378581691299499882937871749804533241949848838659945981
    phi_n = t*u-1
    d = invmod(e,phi_n)
    mingwen = pow(flag,d,n)
    print str(hex(mingwen))[2:-1].decode('hex')

if __name__ == "__main__":
    main()